<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>晓吹的摆烂博客</title><link>https://XiaoCoaiX.github.io/xcsweb.github.io</link><description>This is a subtitle.</description><copyright>晓吹的摆烂博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/97146342?v=4</url><title>avatar</title><link>https://XiaoCoaiX.github.io/xcsweb.github.io</link></image><lastBuildDate>Wed, 11 Dec 2024 15:10:13 +0000</lastBuildDate><managingEditor>晓吹的摆烂博客</managingEditor><ttl>60</ttl><webMaster>晓吹的摆烂博客</webMaster><item><title>Unity 基本移动代码</title><link>https://XiaoCoaiX.github.io/xcsweb.github.io/post/Unity%20-ji-ben-yi-dong-dai-ma.html</link><description>```c#&#13;
using System;  &#13;
using System.Collections;  &#13;
using System.Collections.Generic;  &#13;
using UnityEngine;  &#13;
using UnityEngine.InputSystem;  &#13;
&#13;
public class PlayerController : MonoBehaviour  &#13;
{  &#13;
    // 用于存储玩家的输入控制器，通过输入系统生成的类管理所有输入操作  &#13;
    public PlayerInputControl inputControl;  &#13;
    // 玩家的刚体组件，用于处理角色的物理运动  &#13;
    private Rigidbody2D rb;  &#13;
    // 保存玩家输入的方向向量（例如移动方向）  &#13;
    public Vector2 inputDirection;  &#13;
&#13;
    [Header('基本参数')]  &#13;
    // 玩家水平移动速度  &#13;
    public float speed;  &#13;
    // 玩家跳跃的力量  &#13;
    public float jumpForce;  &#13;
&#13;
    // 在游戏对象实例化时调用，用于初始化变量和绑定输入事件  &#13;
    void Awake()  &#13;
    {  &#13;
        // 实例化输入控制器  &#13;
        inputControl = new PlayerInputControl();  &#13;
        // 获取当前游戏对象上的 Rigidbody2D 组件  &#13;
        rb = GetComponent&lt;Rigidbody2D&gt;();  &#13;
        // 订阅跳跃动作的开始事件，按下跳跃按键时调用 Jump 方法  &#13;
        inputControl.Gameplay.Jump.started += Jump;  &#13;
    }  &#13;
&#13;
    // 在脚本启用时调用，激活输入控制器  &#13;
    void OnEnable()  &#13;
    {  &#13;
        inputControl.Enable(); // 启用输入控制  &#13;
    }  &#13;
&#13;
    // 在脚本禁用时调用，禁用输入控制器  &#13;
    void OnDisable()  &#13;
    {  &#13;
        inputControl.Disable(); // 停用输入控制  &#13;
    }  &#13;
&#13;
    // 每帧调用，用于更新玩家输入方向  &#13;
    void Update()  &#13;
    {  &#13;
        // 读取玩家的移动输入（例如键盘 WASD 或手柄摇杆）  &#13;
        inputDirection = inputControl.Gameplay.Move.ReadValue&lt;Vector2&gt;();  &#13;
    }  &#13;
&#13;
    // 每固定时间间隔调用，用于处理物理相关的更新（推荐用于物理计算）  &#13;
    void FixedUpdate()  &#13;
    {  &#13;
        Move(); // 调用移动逻辑  &#13;
    }  &#13;
&#13;
    // 定义玩家移动逻辑  &#13;
    void Move()  &#13;
    {  &#13;
        // 设置玩家的水平速度，同时保留垂直方向的速度（如跳跃和重力）  &#13;
        rb.velocity = new Vector2(speed * Time.deltaTime * inputDirection.x, rb.velocity.y);  &#13;
&#13;
        // 获取玩家当前的朝向（通过对象的缩放值判断）  &#13;
        int faceDir = (int)transform.localScale.x;  &#13;
        &#13;
        // 如果玩家向右移动且朝向不为右，则调整朝向为右  &#13;
        if (inputDirection.x &gt; 0 &amp;&amp; faceDir != 1)  &#13;
        {  &#13;
            transform.localScale = new Vector3(1, 1, 1); // 设置玩家朝向右  &#13;
        }  &#13;
        // 如果玩家向左移动且朝向不为左，则调整朝向为左  &#13;
        else if (inputDirection.x &lt; 0 &amp;&amp; faceDir != -1)  &#13;
        {  &#13;
            transform.localScale = new Vector3(-1, 1, 1); // 设置玩家朝向左  &#13;
        }  &#13;
    }  &#13;
&#13;
    // 跳跃逻辑，绑定到 Jump 动作的 started 事件  &#13;
    private void Jump(InputAction.CallbackContext context)  &#13;
    {  &#13;
        // 在角色上施加向上的瞬时力（Impulse 模式）实现跳跃  &#13;
        rb.AddForce(transform.up * jumpForce, ForceMode2D.Impulse);  &#13;
    }  &#13;
}&#13;
&#13;
``` 。</description><guid isPermaLink="true">https://XiaoCoaiX.github.io/xcsweb.github.io/post/Unity%20-ji-ben-yi-dong-dai-ma.html</guid><pubDate>Wed, 11 Dec 2024 15:09:30 +0000</pubDate></item><item><title>C语言求解八皇后问题</title><link>https://XiaoCoaiX.github.io/xcsweb.github.io/post/C-yu-yan-qiu-jie-ba-huang-hou-wen-ti.html</link><description>利用回溯法&#13;
```c&#13;
#include &lt;stdio.h&gt;&#13;
int place[8] = {0};  //保存每行皇后位置&#13;
int flag[8] = {0}; // 列标记&#13;
int d1[16] = {0}; // 对角线1&#13;
int d2[16] = {0}; // 对角线2&#13;
int count = 0;&#13;
&#13;
void place_queen(int x, int y) {&#13;
    place[x] = y;&#13;
    flag[y] = 1;&#13;
    d1[x - y + 7] = 1; // 主对角线索引&#13;
    d2[x + y] = 1;     // 副对角线索引&#13;
}&#13;
&#13;
void remove_queen(int x, int y) {&#13;
    flag[y] = 0;&#13;
    d1[x - y + 7] = 0;&#13;
    d2[x + y] = 0;&#13;
}&#13;
&#13;
void print() { // 打印皇后位置&#13;
    int i, j;&#13;
    int table[8][8] = {0};&#13;
    count++; // 计算解的个数&#13;
    printf('No. %d\n', count);&#13;
    for (i = 0; i &lt; 8; i++) {&#13;
        table[i][place[i]] = 1; // 将place数组转为二维数组&#13;
    }&#13;
    for (i = 0; i &lt; 8; i++) {&#13;
        for (j = 0; j &lt; 8; j++) {&#13;
            printf('%d ', table[i][j]);&#13;
        }&#13;
        printf('\n');&#13;
    }&#13;
    printf('&lt;================&gt;\n');&#13;
}&#13;
&#13;
void generation(int x) {&#13;
    int y;&#13;
    for (y = 0; y &lt; 8; y++) {&#13;
        // 判断是否冲突&#13;
        if (!(flag[y] || d1[x - y + 7] || d2[y + x])) {&#13;
            place_queen(x, y); // 放置皇后&#13;
            if (x &lt; 7) {&#13;
                generation(x + 1); // 递归&#13;
            } else {&#13;
                print(); // 放完所有的皇后&#13;
            }&#13;
            remove_queen(x, y); // 回溯&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
int main() {&#13;
    generation(0); // 从第0行开始放置&#13;
}&#13;
``` 。</description><guid isPermaLink="true">https://XiaoCoaiX.github.io/xcsweb.github.io/post/C-yu-yan-qiu-jie-ba-huang-hou-wen-ti.html</guid><pubDate>Wed, 11 Dec 2024 06:40:10 +0000</pubDate></item><item><title>解决C语言函数调用 warning: implicit declaration of function ‘a‘</title><link>https://XiaoCoaiX.github.io/xcsweb.github.io/post/jie-jue-C-yu-yan-han-shu-diao-yong-%20warning-%20implicit%20declaration%20of%20function%20%E2%80%98a%E2%80%98.html</link><description>&gt; 本文截取自 https://blog.csdn.net/xiaobai729/article/details/127138269&#13;
&#13;
一般常见原因是先写了主函数，然后在主函数中调用其他函数。</description><guid isPermaLink="true">https://XiaoCoaiX.github.io/xcsweb.github.io/post/jie-jue-C-yu-yan-han-shu-diao-yong-%20warning-%20implicit%20declaration%20of%20function%20%E2%80%98a%E2%80%98.html</guid><pubDate>Tue, 10 Dec 2024 09:04:28 +0000</pubDate></item><item><title>C语言环境设置 | Windows 安装编译器和 VS Code</title><link>https://XiaoCoaiX.github.io/xcsweb.github.io/post/C-yu-yan-huan-jing-she-zhi-%20-%20Windows%20-an-zhuang-bian-yi-qi-he-%20VS%20Code.html</link><description>&gt; 本文截取自 https://www.bilibili.com/video/BV112z3YUEmU&#13;
# 下载 C 编译器&#13;
为了能在 Windows 上使用 GCC，我们可以下载 MSYS2，它包含了 GCC 编译器的 Windows 版本。</description><guid isPermaLink="true">https://XiaoCoaiX.github.io/xcsweb.github.io/post/C-yu-yan-huan-jing-she-zhi-%20-%20Windows%20-an-zhuang-bian-yi-qi-he-%20VS%20Code.html</guid><pubDate>Tue, 10 Dec 2024 08:59:02 +0000</pubDate></item><item><title>B站注册时间查询</title><link>https://XiaoCoaiX.github.io/xcsweb.github.io/post/B-zhan-zhu-ce-shi-jian-cha-xun.html</link><description>1. 网页上登陆自己的b站账号。</description><guid isPermaLink="true">https://XiaoCoaiX.github.io/xcsweb.github.io/post/B-zhan-zhu-ce-shi-jian-cha-xun.html</guid><pubDate>Tue, 10 Dec 2024 06:44:47 +0000</pubDate></item><item><title>Hello, world!</title><link>https://XiaoCoaiX.github.io/xcsweb.github.io/post/Hello%2C%20world%21.html</link><description># test&#13;
这是一个测试页面。</description><guid isPermaLink="true">https://XiaoCoaiX.github.io/xcsweb.github.io/post/Hello%2C%20world%21.html</guid><pubDate>Tue, 10 Dec 2024 06:19:04 +0000</pubDate></item></channel></rss>